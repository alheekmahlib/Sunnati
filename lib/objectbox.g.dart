// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';

import 'presentation/screens/books/data/models/ar_hadith_model.dart';
import 'presentation/screens/books/data/models/bn_hadith_model.dart';
import 'presentation/screens/books/data/models/book_obj_model.dart';
import 'presentation/screens/books/data/models/collection_lang.dart';
import 'presentation/screens/books/data/models/collection_model.dart';
import 'presentation/screens/books/data/models/en_hadith_model.dart';
import 'presentation/screens/books/data/models/ur_hadith_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 6709973114131400938),
      name: 'ARHadithModel',
      lastPropertyId: const IdUid(16, 3611431526245435897),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3728592436646840414),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 1526200980059140279),
            name: 'volumeNumber',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6624412957064288154),
            name: 'bookNumber',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4316448228105827736),
            name: 'bookName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7760962924843601955),
            name: 'babNumber',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3867337150400311621),
            name: 'babName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1868920890882606963),
            name: 'hadithNumber',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 9119110901469355556),
            name: 'hadithText',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 7221702112426362583),
            name: 'bookID',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 1776619628027327052),
            name: 'ourHadithNumber',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 393963206733633761),
            name: 'matchingArabicURN',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 6774749768739157793),
            name: 'lastUpdated',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 4556560770867787133),
            name: 'arabicURN',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 679429849129206021),
            name: 'annotations',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 8180778648771454577),
            name: 'grade1',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 3611431526245435897),
            name: 'collectionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 7143072694409737776),
            relationTarget: 'Collection')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 5539769780335496849),
      name: 'BNHadithModel',
      lastPropertyId: const IdUid(15, 8956539385137643883),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4790904639727497638),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 5419555521182088669),
            name: 'collectionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(2, 2021068556375464510),
            relationTarget: 'Collection'),
        ModelProperty(
            id: const IdUid(3, 2323607482820665990),
            name: 'volumeNumber',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2809339447341830235),
            name: 'bookNumber',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2221506358807286527),
            name: 'bookName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7721142154098507896),
            name: 'babNumber',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 3256996667404842990),
            name: 'babName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4641351440140811591),
            name: 'hadithNumber',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 271221375637863578),
            name: 'hadithText',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 2114154275745158117),
            name: 'bookID',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 1873731370342180928),
            name: 'ourHadithNumber',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 4825694006861391349),
            name: 'matchingArabicURN',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 5937822654480555203),
            name: 'lastUpdated',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 8589973548962247880),
            name: 'banglaURN',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 8956539385137643883),
            name: 'grade1',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 59935922569576759),
      name: 'BookObjModel',
      lastPropertyId: const IdUid(3, 2227862694701428639),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5362343807417798045),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 4060958173497627936),
            name: 'bookName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2227862694701428639),
            name: 'bookNumber',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 1561678104814154253),
      name: 'Collection',
      lastPropertyId: const IdUid(8, 1431702436221486932),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 734450944888121794),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 2368257316710094699),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3526818442367122504),
            name: 'bookName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1561769386204257561),
            name: 'arAndEnName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2515372291622768408),
            name: 'hasBooks',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2905853428288683191),
            name: 'hasChapters',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1472665015127329556),
            name: 'totalHadith',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 1431702436221486932),
            name: 'totalAvailableHadith',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[
        ModelRelation(
            id: const IdUid(1, 3383574135876907300),
            name: 'collectionLangs',
            targetId: const IdUid(5, 8457838776780920989)),
        ModelRelation(
            id: const IdUid(2, 1152706552093172835),
            name: 'booksNames',
            targetId: const IdUid(3, 59935922569576759))
      ],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 8457838776780920989),
      name: 'CollectionLang',
      lastPropertyId: const IdUid(4, 8673798086372019663),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3612859577233213429),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 4089370826839793042),
            name: 'lang',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7741837385627137252),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8673798086372019663),
            name: 'shortIntro',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 5132595873638839905),
      name: 'ENHadithModel',
      lastPropertyId: const IdUid(15, 4691555079253169507),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8777275329962413331),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 5250175049987853707),
            name: 'collectionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(3, 4402243143303435483),
            relationTarget: 'Collection'),
        ModelProperty(
            id: const IdUid(3, 4893408869694736094),
            name: 'volumeNumber',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2737845274630535770),
            name: 'bookNumber',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2641342996350655892),
            name: 'bookName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 9104838225358404554),
            name: 'babNumber',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8099050547547560160),
            name: 'babName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 214151361371048379),
            name: 'hadithNumber',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 5683936991386174642),
            name: 'hadithText',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 931130474235954521),
            name: 'bookID',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 4570017894757853706),
            name: 'ourHadithNumber',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 4714042696489851617),
            name: 'matchingArabicURN',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 3666476636812208495),
            name: 'lastUpdated',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 4775045480598328845),
            name: 'englishURN',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 4691555079253169507),
            name: 'grade1',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 4484317253542638023),
      name: 'URHadithModel',
      lastPropertyId: const IdUid(15, 1971942636078523669),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5551113054672979870),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 6168157335140005376),
            name: 'collectionId',
            type: 11,
            flags: 520,
            indexId: const IdUid(4, 5050936784559328790),
            relationTarget: 'Collection'),
        ModelProperty(
            id: const IdUid(3, 4306383885213225717),
            name: 'volumeNumber',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4067048712412525898),
            name: 'bookNumber',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2311925087521291462),
            name: 'bookName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5605767066536412311),
            name: 'babNumber',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 888868147049768868),
            name: 'babName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 6149920359860267706),
            name: 'hadithNumber',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 1563656179116452183),
            name: 'hadithText',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 9020183355188936509),
            name: 'bookID',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 4748905374434062704),
            name: 'ourHadithNumber',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 1831191165827828849),
            name: 'matchingArabicURN',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 4979497568400549426),
            name: 'lastUpdated',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 4450897327999616874),
            name: 'urduURN',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 1971942636078523669),
            name: 'grade1',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Store openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) =>
    Store(getObjectBoxModel(),
        directory: directory,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(7, 4484317253542638023),
      lastIndexId: const IdUid(4, 5050936784559328790),
      lastRelationId: const IdUid(2, 1152706552093172835),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    ARHadithModel: EntityDefinition<ARHadithModel>(
        model: _entities[0],
        toOneRelations: (ARHadithModel object) => [object.collection],
        toManyRelations: (ARHadithModel object) => {},
        getId: (ARHadithModel object) => object.id,
        setId: (ARHadithModel object, int id) {
          object.id = id;
        },
        objectToFB: (ARHadithModel object, fb.Builder fbb) {
          final bookNameOffset = fbb.writeString(object.bookName);
          final babNumberOffset = fbb.writeString(object.babNumber);
          final babNameOffset =
              object.babName == null ? null : fbb.writeString(object.babName!);
          final hadithTextOffset = fbb.writeString(object.hadithText);
          final bookIDOffset = fbb.writeString(object.bookID);
          final lastUpdatedOffset = fbb.writeString(object.lastUpdated);
          final annotationsOffset = object.annotations == null
              ? null
              : fbb.writeList(object.annotations!
                  .map(fbb.writeString)
                  .toList(growable: false));
          final grade1Offset =
              object.grade1 == null ? null : fbb.writeString(object.grade1!);
          fbb.startTable(17);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.volumeNumber);
          fbb.addInt64(2, object.bookNumber);
          fbb.addOffset(3, bookNameOffset);
          fbb.addOffset(4, babNumberOffset);
          fbb.addOffset(5, babNameOffset);
          fbb.addInt64(6, object.hadithNumber);
          fbb.addOffset(7, hadithTextOffset);
          fbb.addOffset(8, bookIDOffset);
          fbb.addInt64(9, object.ourHadithNumber);
          fbb.addInt64(10, object.matchingArabicURN);
          fbb.addOffset(11, lastUpdatedOffset);
          fbb.addInt64(12, object.arabicURN);
          fbb.addOffset(13, annotationsOffset);
          fbb.addOffset(14, grade1Offset);
          fbb.addInt64(15, object.collection.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final arabicURNParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 28, 0);
          final annotationsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGetNullable(buffer, rootOffset, 30);
          final grade1Param = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 32);
          final collectionParam = ToOne<Collection>(
              targetId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 34, 0));
          final volumeNumberParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final bookNumberParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final bookNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final babNumberParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final babNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final hadithNumberParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final hadithTextParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 18, '');
          final bookIDParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final ourHadithNumberParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0);
          final matchingArabicURNParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          final lastUpdatedParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 26, '');
          final object = ARHadithModel(
              id: idParam,
              arabicURN: arabicURNParam,
              annotations: annotationsParam,
              grade1: grade1Param,
              collection: collectionParam,
              volumeNumber: volumeNumberParam,
              bookNumber: bookNumberParam,
              bookName: bookNameParam,
              babNumber: babNumberParam,
              babName: babNameParam,
              hadithNumber: hadithNumberParam,
              hadithText: hadithTextParam,
              bookID: bookIDParam,
              ourHadithNumber: ourHadithNumberParam,
              matchingArabicURN: matchingArabicURNParam,
              lastUpdated: lastUpdatedParam);
          object.collection.attach(store);
          return object;
        }),
    BNHadithModel: EntityDefinition<BNHadithModel>(
        model: _entities[1],
        toOneRelations: (BNHadithModel object) => [object.collection],
        toManyRelations: (BNHadithModel object) => {},
        getId: (BNHadithModel object) => object.id,
        setId: (BNHadithModel object, int id) {
          object.id = id;
        },
        objectToFB: (BNHadithModel object, fb.Builder fbb) {
          final bookNameOffset = fbb.writeString(object.bookName);
          final babNumberOffset = fbb.writeString(object.babNumber);
          final babNameOffset =
              object.babName == null ? null : fbb.writeString(object.babName!);
          final hadithTextOffset = fbb.writeString(object.hadithText);
          final bookIDOffset = fbb.writeString(object.bookID);
          final lastUpdatedOffset = fbb.writeString(object.lastUpdated);
          final grade1Offset =
              object.grade1 == null ? null : fbb.writeString(object.grade1!);
          fbb.startTable(16);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.collection.targetId);
          fbb.addInt64(2, object.volumeNumber);
          fbb.addInt64(3, object.bookNumber);
          fbb.addOffset(4, bookNameOffset);
          fbb.addOffset(5, babNumberOffset);
          fbb.addOffset(6, babNameOffset);
          fbb.addInt64(7, object.hadithNumber);
          fbb.addOffset(8, hadithTextOffset);
          fbb.addOffset(9, bookIDOffset);
          fbb.addInt64(10, object.ourHadithNumber);
          fbb.addInt64(11, object.matchingArabicURN);
          fbb.addOffset(12, lastUpdatedOffset);
          fbb.addInt64(13, object.banglaURN);
          fbb.addOffset(14, grade1Offset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final banglaURNParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0);
          final grade1Param = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 32);
          final collectionParam = ToOne<Collection>(
              targetId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final volumeNumberParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final bookNumberParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final bookNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final babNumberParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final babNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final hadithNumberParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          final hadithTextParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final bookIDParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 22, '');
          final ourHadithNumberParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          final matchingArabicURNParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          final lastUpdatedParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 28, '');
          final object = BNHadithModel(
              id: idParam,
              banglaURN: banglaURNParam,
              grade1: grade1Param,
              collection: collectionParam,
              volumeNumber: volumeNumberParam,
              bookNumber: bookNumberParam,
              bookName: bookNameParam,
              babNumber: babNumberParam,
              babName: babNameParam,
              hadithNumber: hadithNumberParam,
              hadithText: hadithTextParam,
              bookID: bookIDParam,
              ourHadithNumber: ourHadithNumberParam,
              matchingArabicURN: matchingArabicURNParam,
              lastUpdated: lastUpdatedParam);
          object.collection.attach(store);
          return object;
        }),
    BookObjModel: EntityDefinition<BookObjModel>(
        model: _entities[2],
        toOneRelations: (BookObjModel object) => [],
        toManyRelations: (BookObjModel object) => {},
        getId: (BookObjModel object) => object.id,
        setId: (BookObjModel object, int id) {
          object.id = id;
        },
        objectToFB: (BookObjModel object, fb.Builder fbb) {
          final bookNameOffset = fbb.writeString(object.bookName);
          final bookNumberOffset = fbb.writeString(object.bookNumber);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, bookNameOffset);
          fbb.addOffset(2, bookNumberOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final bookNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final bookNumberParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final object = BookObjModel(
              id: idParam,
              bookName: bookNameParam,
              bookNumber: bookNumberParam);

          return object;
        }),
    Collection: EntityDefinition<Collection>(
        model: _entities[3],
        toOneRelations: (Collection object) => [],
        toManyRelations: (Collection object) => {
              RelInfo<Collection>.toMany(1, object.id): object.collectionLangs,
              RelInfo<Collection>.toMany(2, object.id): object.booksNames
            },
        getId: (Collection object) => object.id,
        setId: (Collection object, int id) {
          object.id = id;
        },
        objectToFB: (Collection object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final bookNameOffset = fbb.writeString(object.bookName);
          final arAndEnNameOffset = fbb.writeString(object.arAndEnName);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, bookNameOffset);
          fbb.addOffset(3, arAndEnNameOffset);
          fbb.addBool(4, object.hasBooks);
          fbb.addBool(5, object.hasChapters);
          fbb.addInt64(6, object.totalHadith);
          fbb.addInt64(7, object.totalAvailableHadith);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final bookNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final arAndEnNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final hasBooksParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false);
          final hasChaptersParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false);
          final collectionLangsParam = ToMany<CollectionLang>();
          final totalHadithParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          final totalAvailableHadithParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          final booksNamesParam = ToMany<BookObjModel>();
          final object = Collection(
              id: idParam,
              name: nameParam,
              bookName: bookNameParam,
              arAndEnName: arAndEnNameParam,
              hasBooks: hasBooksParam,
              hasChapters: hasChaptersParam,
              collectionLangs: collectionLangsParam,
              totalHadith: totalHadithParam,
              totalAvailableHadith: totalAvailableHadithParam,
              booksNames: booksNamesParam);
          InternalToManyAccess.setRelInfo<Collection>(object.collectionLangs,
              store, RelInfo<Collection>.toMany(1, object.id));
          InternalToManyAccess.setRelInfo<Collection>(object.booksNames, store,
              RelInfo<Collection>.toMany(2, object.id));
          return object;
        }),
    CollectionLang: EntityDefinition<CollectionLang>(
        model: _entities[4],
        toOneRelations: (CollectionLang object) => [],
        toManyRelations: (CollectionLang object) => {},
        getId: (CollectionLang object) => object.id,
        setId: (CollectionLang object, int id) {
          object.id = id;
        },
        objectToFB: (CollectionLang object, fb.Builder fbb) {
          final langOffset = fbb.writeString(object.lang);
          final titleOffset = fbb.writeString(object.title);
          final shortIntroOffset = fbb.writeString(object.shortIntro);
          fbb.startTable(5);
          fbb.addInt64(0, object.id ?? 0);
          fbb.addOffset(1, langOffset);
          fbb.addOffset(2, titleOffset);
          fbb.addOffset(3, shortIntroOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final langParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final shortIntroParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final object = CollectionLang(
              lang: langParam, title: titleParam, shortIntro: shortIntroParam)
            ..id =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 4);

          return object;
        }),
    ENHadithModel: EntityDefinition<ENHadithModel>(
        model: _entities[5],
        toOneRelations: (ENHadithModel object) => [object.collection],
        toManyRelations: (ENHadithModel object) => {},
        getId: (ENHadithModel object) => object.id,
        setId: (ENHadithModel object, int id) {
          object.id = id;
        },
        objectToFB: (ENHadithModel object, fb.Builder fbb) {
          final bookNameOffset = fbb.writeString(object.bookName);
          final babNumberOffset = fbb.writeString(object.babNumber);
          final babNameOffset =
              object.babName == null ? null : fbb.writeString(object.babName!);
          final hadithTextOffset = fbb.writeString(object.hadithText);
          final bookIDOffset = fbb.writeString(object.bookID);
          final lastUpdatedOffset = fbb.writeString(object.lastUpdated);
          final grade1Offset =
              object.grade1 == null ? null : fbb.writeString(object.grade1!);
          fbb.startTable(16);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.collection.targetId);
          fbb.addInt64(2, object.volumeNumber);
          fbb.addInt64(3, object.bookNumber);
          fbb.addOffset(4, bookNameOffset);
          fbb.addOffset(5, babNumberOffset);
          fbb.addOffset(6, babNameOffset);
          fbb.addInt64(7, object.hadithNumber);
          fbb.addOffset(8, hadithTextOffset);
          fbb.addOffset(9, bookIDOffset);
          fbb.addInt64(10, object.ourHadithNumber);
          fbb.addInt64(11, object.matchingArabicURN);
          fbb.addOffset(12, lastUpdatedOffset);
          fbb.addInt64(13, object.englishURN);
          fbb.addOffset(14, grade1Offset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final englishURNParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0);
          final grade1Param = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 32);
          final collectionParam = ToOne<Collection>(
              targetId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final volumeNumberParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final bookNumberParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final bookNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final babNumberParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final babNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final hadithNumberParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          final hadithTextParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final bookIDParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 22, '');
          final ourHadithNumberParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          final matchingArabicURNParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          final lastUpdatedParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 28, '');
          final object = ENHadithModel(
              id: idParam,
              englishURN: englishURNParam,
              grade1: grade1Param,
              collection: collectionParam,
              volumeNumber: volumeNumberParam,
              bookNumber: bookNumberParam,
              bookName: bookNameParam,
              babNumber: babNumberParam,
              babName: babNameParam,
              hadithNumber: hadithNumberParam,
              hadithText: hadithTextParam,
              bookID: bookIDParam,
              ourHadithNumber: ourHadithNumberParam,
              matchingArabicURN: matchingArabicURNParam,
              lastUpdated: lastUpdatedParam);
          object.collection.attach(store);
          return object;
        }),
    URHadithModel: EntityDefinition<URHadithModel>(
        model: _entities[6],
        toOneRelations: (URHadithModel object) => [object.collection],
        toManyRelations: (URHadithModel object) => {},
        getId: (URHadithModel object) => object.id,
        setId: (URHadithModel object, int id) {
          object.id = id;
        },
        objectToFB: (URHadithModel object, fb.Builder fbb) {
          final bookNameOffset = fbb.writeString(object.bookName);
          final babNumberOffset = fbb.writeString(object.babNumber);
          final babNameOffset =
              object.babName == null ? null : fbb.writeString(object.babName!);
          final hadithTextOffset = fbb.writeString(object.hadithText);
          final bookIDOffset = fbb.writeString(object.bookID);
          final lastUpdatedOffset = fbb.writeString(object.lastUpdated);
          final grade1Offset =
              object.grade1 == null ? null : fbb.writeString(object.grade1!);
          fbb.startTable(16);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.collection.targetId);
          fbb.addInt64(2, object.volumeNumber);
          fbb.addInt64(3, object.bookNumber);
          fbb.addOffset(4, bookNameOffset);
          fbb.addOffset(5, babNumberOffset);
          fbb.addOffset(6, babNameOffset);
          fbb.addInt64(7, object.hadithNumber);
          fbb.addOffset(8, hadithTextOffset);
          fbb.addOffset(9, bookIDOffset);
          fbb.addInt64(10, object.ourHadithNumber);
          fbb.addInt64(11, object.matchingArabicURN);
          fbb.addOffset(12, lastUpdatedOffset);
          fbb.addInt64(13, object.urduURN);
          fbb.addOffset(14, grade1Offset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final urduURNParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0);
          final grade1Param = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 32);
          final collectionParam = ToOne<Collection>(
              targetId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final volumeNumberParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final bookNumberParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final bookNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final babNumberParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final babNameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final hadithNumberParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0);
          final hadithTextParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 20, '');
          final bookIDParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 22, '');
          final ourHadithNumberParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);
          final matchingArabicURNParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0);
          final lastUpdatedParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 28, '');
          final object = URHadithModel(
              id: idParam,
              urduURN: urduURNParam,
              grade1: grade1Param,
              collection: collectionParam,
              volumeNumber: volumeNumberParam,
              bookNumber: bookNumberParam,
              bookName: bookNameParam,
              babNumber: babNumberParam,
              babName: babNameParam,
              hadithNumber: hadithNumberParam,
              hadithText: hadithTextParam,
              bookID: bookIDParam,
              ourHadithNumber: ourHadithNumberParam,
              matchingArabicURN: matchingArabicURNParam,
              lastUpdated: lastUpdatedParam);
          object.collection.attach(store);
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [ARHadithModel] entity fields to define ObjectBox queries.
class ARHadithModel_ {
  /// see [ARHadithModel.id]
  static final id =
      QueryIntegerProperty<ARHadithModel>(_entities[0].properties[0]);

  /// see [ARHadithModel.volumeNumber]
  static final volumeNumber =
      QueryIntegerProperty<ARHadithModel>(_entities[0].properties[1]);

  /// see [ARHadithModel.bookNumber]
  static final bookNumber =
      QueryIntegerProperty<ARHadithModel>(_entities[0].properties[2]);

  /// see [ARHadithModel.bookName]
  static final bookName =
      QueryStringProperty<ARHadithModel>(_entities[0].properties[3]);

  /// see [ARHadithModel.babNumber]
  static final babNumber =
      QueryStringProperty<ARHadithModel>(_entities[0].properties[4]);

  /// see [ARHadithModel.babName]
  static final babName =
      QueryStringProperty<ARHadithModel>(_entities[0].properties[5]);

  /// see [ARHadithModel.hadithNumber]
  static final hadithNumber =
      QueryIntegerProperty<ARHadithModel>(_entities[0].properties[6]);

  /// see [ARHadithModel.hadithText]
  static final hadithText =
      QueryStringProperty<ARHadithModel>(_entities[0].properties[7]);

  /// see [ARHadithModel.bookID]
  static final bookID =
      QueryStringProperty<ARHadithModel>(_entities[0].properties[8]);

  /// see [ARHadithModel.ourHadithNumber]
  static final ourHadithNumber =
      QueryIntegerProperty<ARHadithModel>(_entities[0].properties[9]);

  /// see [ARHadithModel.matchingArabicURN]
  static final matchingArabicURN =
      QueryIntegerProperty<ARHadithModel>(_entities[0].properties[10]);

  /// see [ARHadithModel.lastUpdated]
  static final lastUpdated =
      QueryStringProperty<ARHadithModel>(_entities[0].properties[11]);

  /// see [ARHadithModel.arabicURN]
  static final arabicURN =
      QueryIntegerProperty<ARHadithModel>(_entities[0].properties[12]);

  /// see [ARHadithModel.annotations]
  static final annotations =
      QueryStringVectorProperty<ARHadithModel>(_entities[0].properties[13]);

  /// see [ARHadithModel.grade1]
  static final grade1 =
      QueryStringProperty<ARHadithModel>(_entities[0].properties[14]);

  /// see [ARHadithModel.collection]
  static final collection = QueryRelationToOne<ARHadithModel, Collection>(
      _entities[0].properties[15]);
}

/// [BNHadithModel] entity fields to define ObjectBox queries.
class BNHadithModel_ {
  /// see [BNHadithModel.id]
  static final id =
      QueryIntegerProperty<BNHadithModel>(_entities[1].properties[0]);

  /// see [BNHadithModel.collection]
  static final collection =
      QueryRelationToOne<BNHadithModel, Collection>(_entities[1].properties[1]);

  /// see [BNHadithModel.volumeNumber]
  static final volumeNumber =
      QueryIntegerProperty<BNHadithModel>(_entities[1].properties[2]);

  /// see [BNHadithModel.bookNumber]
  static final bookNumber =
      QueryIntegerProperty<BNHadithModel>(_entities[1].properties[3]);

  /// see [BNHadithModel.bookName]
  static final bookName =
      QueryStringProperty<BNHadithModel>(_entities[1].properties[4]);

  /// see [BNHadithModel.babNumber]
  static final babNumber =
      QueryStringProperty<BNHadithModel>(_entities[1].properties[5]);

  /// see [BNHadithModel.babName]
  static final babName =
      QueryStringProperty<BNHadithModel>(_entities[1].properties[6]);

  /// see [BNHadithModel.hadithNumber]
  static final hadithNumber =
      QueryIntegerProperty<BNHadithModel>(_entities[1].properties[7]);

  /// see [BNHadithModel.hadithText]
  static final hadithText =
      QueryStringProperty<BNHadithModel>(_entities[1].properties[8]);

  /// see [BNHadithModel.bookID]
  static final bookID =
      QueryStringProperty<BNHadithModel>(_entities[1].properties[9]);

  /// see [BNHadithModel.ourHadithNumber]
  static final ourHadithNumber =
      QueryIntegerProperty<BNHadithModel>(_entities[1].properties[10]);

  /// see [BNHadithModel.matchingArabicURN]
  static final matchingArabicURN =
      QueryIntegerProperty<BNHadithModel>(_entities[1].properties[11]);

  /// see [BNHadithModel.lastUpdated]
  static final lastUpdated =
      QueryStringProperty<BNHadithModel>(_entities[1].properties[12]);

  /// see [BNHadithModel.banglaURN]
  static final banglaURN =
      QueryIntegerProperty<BNHadithModel>(_entities[1].properties[13]);

  /// see [BNHadithModel.grade1]
  static final grade1 =
      QueryStringProperty<BNHadithModel>(_entities[1].properties[14]);
}

/// [BookObjModel] entity fields to define ObjectBox queries.
class BookObjModel_ {
  /// see [BookObjModel.id]
  static final id =
      QueryIntegerProperty<BookObjModel>(_entities[2].properties[0]);

  /// see [BookObjModel.bookName]
  static final bookName =
      QueryStringProperty<BookObjModel>(_entities[2].properties[1]);

  /// see [BookObjModel.bookNumber]
  static final bookNumber =
      QueryStringProperty<BookObjModel>(_entities[2].properties[2]);
}

/// [Collection] entity fields to define ObjectBox queries.
class Collection_ {
  /// see [Collection.id]
  static final id =
      QueryIntegerProperty<Collection>(_entities[3].properties[0]);

  /// see [Collection.name]
  static final name =
      QueryStringProperty<Collection>(_entities[3].properties[1]);

  /// see [Collection.bookName]
  static final bookName =
      QueryStringProperty<Collection>(_entities[3].properties[2]);

  /// see [Collection.arAndEnName]
  static final arAndEnName =
      QueryStringProperty<Collection>(_entities[3].properties[3]);

  /// see [Collection.hasBooks]
  static final hasBooks =
      QueryBooleanProperty<Collection>(_entities[3].properties[4]);

  /// see [Collection.hasChapters]
  static final hasChapters =
      QueryBooleanProperty<Collection>(_entities[3].properties[5]);

  /// see [Collection.totalHadith]
  static final totalHadith =
      QueryIntegerProperty<Collection>(_entities[3].properties[6]);

  /// see [Collection.totalAvailableHadith]
  static final totalAvailableHadith =
      QueryIntegerProperty<Collection>(_entities[3].properties[7]);

  /// see [Collection.collectionLangs]
  static final collectionLangs =
      QueryRelationToMany<Collection, CollectionLang>(
          _entities[3].relations[0]);

  /// see [Collection.booksNames]
  static final booksNames =
      QueryRelationToMany<Collection, BookObjModel>(_entities[3].relations[1]);
}

/// [CollectionLang] entity fields to define ObjectBox queries.
class CollectionLang_ {
  /// see [CollectionLang.id]
  static final id =
      QueryIntegerProperty<CollectionLang>(_entities[4].properties[0]);

  /// see [CollectionLang.lang]
  static final lang =
      QueryStringProperty<CollectionLang>(_entities[4].properties[1]);

  /// see [CollectionLang.title]
  static final title =
      QueryStringProperty<CollectionLang>(_entities[4].properties[2]);

  /// see [CollectionLang.shortIntro]
  static final shortIntro =
      QueryStringProperty<CollectionLang>(_entities[4].properties[3]);
}

/// [ENHadithModel] entity fields to define ObjectBox queries.
class ENHadithModel_ {
  /// see [ENHadithModel.id]
  static final id =
      QueryIntegerProperty<ENHadithModel>(_entities[5].properties[0]);

  /// see [ENHadithModel.collection]
  static final collection =
      QueryRelationToOne<ENHadithModel, Collection>(_entities[5].properties[1]);

  /// see [ENHadithModel.volumeNumber]
  static final volumeNumber =
      QueryIntegerProperty<ENHadithModel>(_entities[5].properties[2]);

  /// see [ENHadithModel.bookNumber]
  static final bookNumber =
      QueryIntegerProperty<ENHadithModel>(_entities[5].properties[3]);

  /// see [ENHadithModel.bookName]
  static final bookName =
      QueryStringProperty<ENHadithModel>(_entities[5].properties[4]);

  /// see [ENHadithModel.babNumber]
  static final babNumber =
      QueryStringProperty<ENHadithModel>(_entities[5].properties[5]);

  /// see [ENHadithModel.babName]
  static final babName =
      QueryStringProperty<ENHadithModel>(_entities[5].properties[6]);

  /// see [ENHadithModel.hadithNumber]
  static final hadithNumber =
      QueryIntegerProperty<ENHadithModel>(_entities[5].properties[7]);

  /// see [ENHadithModel.hadithText]
  static final hadithText =
      QueryStringProperty<ENHadithModel>(_entities[5].properties[8]);

  /// see [ENHadithModel.bookID]
  static final bookID =
      QueryStringProperty<ENHadithModel>(_entities[5].properties[9]);

  /// see [ENHadithModel.ourHadithNumber]
  static final ourHadithNumber =
      QueryIntegerProperty<ENHadithModel>(_entities[5].properties[10]);

  /// see [ENHadithModel.matchingArabicURN]
  static final matchingArabicURN =
      QueryIntegerProperty<ENHadithModel>(_entities[5].properties[11]);

  /// see [ENHadithModel.lastUpdated]
  static final lastUpdated =
      QueryStringProperty<ENHadithModel>(_entities[5].properties[12]);

  /// see [ENHadithModel.englishURN]
  static final englishURN =
      QueryIntegerProperty<ENHadithModel>(_entities[5].properties[13]);

  /// see [ENHadithModel.grade1]
  static final grade1 =
      QueryStringProperty<ENHadithModel>(_entities[5].properties[14]);
}

/// [URHadithModel] entity fields to define ObjectBox queries.
class URHadithModel_ {
  /// see [URHadithModel.id]
  static final id =
      QueryIntegerProperty<URHadithModel>(_entities[6].properties[0]);

  /// see [URHadithModel.collection]
  static final collection =
      QueryRelationToOne<URHadithModel, Collection>(_entities[6].properties[1]);

  /// see [URHadithModel.volumeNumber]
  static final volumeNumber =
      QueryIntegerProperty<URHadithModel>(_entities[6].properties[2]);

  /// see [URHadithModel.bookNumber]
  static final bookNumber =
      QueryIntegerProperty<URHadithModel>(_entities[6].properties[3]);

  /// see [URHadithModel.bookName]
  static final bookName =
      QueryStringProperty<URHadithModel>(_entities[6].properties[4]);

  /// see [URHadithModel.babNumber]
  static final babNumber =
      QueryStringProperty<URHadithModel>(_entities[6].properties[5]);

  /// see [URHadithModel.babName]
  static final babName =
      QueryStringProperty<URHadithModel>(_entities[6].properties[6]);

  /// see [URHadithModel.hadithNumber]
  static final hadithNumber =
      QueryIntegerProperty<URHadithModel>(_entities[6].properties[7]);

  /// see [URHadithModel.hadithText]
  static final hadithText =
      QueryStringProperty<URHadithModel>(_entities[6].properties[8]);

  /// see [URHadithModel.bookID]
  static final bookID =
      QueryStringProperty<URHadithModel>(_entities[6].properties[9]);

  /// see [URHadithModel.ourHadithNumber]
  static final ourHadithNumber =
      QueryIntegerProperty<URHadithModel>(_entities[6].properties[10]);

  /// see [URHadithModel.matchingArabicURN]
  static final matchingArabicURN =
      QueryIntegerProperty<URHadithModel>(_entities[6].properties[11]);

  /// see [URHadithModel.lastUpdated]
  static final lastUpdated =
      QueryStringProperty<URHadithModel>(_entities[6].properties[12]);

  /// see [URHadithModel.urduURN]
  static final urduURN =
      QueryIntegerProperty<URHadithModel>(_entities[6].properties[13]);

  /// see [URHadithModel.grade1]
  static final grade1 =
      QueryStringProperty<URHadithModel>(_entities[6].properties[14]);
}
